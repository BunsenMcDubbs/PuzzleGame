From 29c36ac2dfa11f7e70d0701212e37bc734a554ba Mon Sep 17 00:00:00 2001
From: Andrew Dai <theman@andrewdai.co>
Date: Sat, 21 Apr 2012 13:59:26 -0400
Subject: [PATCH] Commented the gui package and eliminated the exceptions
 package and the placeable interface (not used)

---
 src/Start.java                               |    8 +++
 src/exceptions/InvalidLocationException.java |   10 ---
 src/exceptions/NotCompatibleException.java   |   10 ---
 src/gui/PieceShape.java                      |   98 +++++++++++++++++++++++++-
 src/gui/Placeable.java                       |    5 --
 src/gui/PuzzleCanvas.java                    |   85 +++++++++++++++++++---
 src/gui/PuzzleGameFrame.java                 |   39 ++++++++--
 7 files changed, 213 insertions(+), 42 deletions(-)
 create mode 100644 src/Start.java
 delete mode 100644 src/exceptions/InvalidLocationException.java
 delete mode 100644 src/exceptions/NotCompatibleException.java
 delete mode 100644 src/gui/Placeable.java

diff --git a/src/Start.java b/src/Start.java
new file mode 100644
index 0000000..e7c7897
--- /dev/null
+++ b/src/Start.java
@@ -0,0 +1,8 @@
+import gui.PuzzleGameFrame;
+
+public class Start {
+	public static void main(String[] args) {
+		PuzzleGameFrame f = new PuzzleGameFrame();
+	}
+
+}
diff --git a/src/exceptions/InvalidLocationException.java b/src/exceptions/InvalidLocationException.java
deleted file mode 100644
index 690a41b..0000000
--- a/src/exceptions/InvalidLocationException.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package exceptions;
-
-public class InvalidLocationException extends Exception {
-	
-	public InvalidLocationException() {}
-
-	public InvalidLocationException(String message) {
-		super(message);
-	}
-}
diff --git a/src/exceptions/NotCompatibleException.java b/src/exceptions/NotCompatibleException.java
deleted file mode 100644
index e52a10d..0000000
--- a/src/exceptions/NotCompatibleException.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package exceptions;
-
-public class NotCompatibleException extends Exception {
-	
-	public NotCompatibleException() {}
-
-	public NotCompatibleException(String message) {
-		super(message);
-	}
-}
diff --git a/src/gui/PieceShape.java b/src/gui/PieceShape.java
index dfcb528..1f71fb3 100644
--- a/src/gui/PieceShape.java
+++ b/src/gui/PieceShape.java
@@ -95,10 +95,17 @@ public class PieceShape implements Shape{
 		}
 	}
 	
+	/**
+	 * @return The color of the pieceShape
+	 */
 	public Color getColor(){
 		return c;
 	}
 	
+	/**
+	 * Sets the color of the PieceShape
+	 * @param c
+	 */
 	public void setColor(Color c){
 		this.c = c;
 		for(int i = 0; i < 4; i++){
@@ -106,10 +113,18 @@ public class PieceShape implements Shape{
 		}
 	}
 	
-	public void setColor(int side, Color c){
+	/**
+	 * Helper method to set the color of individual sides
+	 * @param side
+	 * @param c
+	 */
+	private void setColor(int side, Color c){
 		sides[side].setColor(c);
 	}
 	
+	/**
+	 * Helper method to ensure all the parts of the PieceShape are in the right place
+	 */
 	public void updateLoc(){
 		if (piece.getOrientation() == 0) {
 			int xTemp = loc.x + 40;
@@ -177,10 +192,18 @@ public class PieceShape implements Shape{
 		}
 	}
 	
+	/**
+	 * Returns the location of the PieceShape
+	 * @return
+	 */
 	public Point getLoc(){
 		return loc;
 	}
 	
+	/**
+	 * Sets the location of the PieceShape
+	 * @param loc
+	 */
 	public void setLoc(Point loc){
 		this.loc = loc;
 	}
@@ -193,11 +216,19 @@ public class PieceShape implements Shape{
 		return piece.isIn();
 	}
 	
+	/**
+	 * Sets the inBoard variable of the framework piece
+	 * @param tf
+	 */
 	public void setInBoard(boolean tf){
 		if (tf) piece.setIn();
 		else piece.setOut();
 	}
 	
+	/**
+	 * Toggles the inBoard variable of the framework piece
+	 * @return
+	 */
 	public boolean toggleInBoard(){
 		if(piece.isIn())
 			piece.setOut();
@@ -206,15 +237,26 @@ public class PieceShape implements Shape{
 		return piece.isIn();
 	}
 	
+	/**
+	 * @return the framework piece of this PieceShape
+	 */
 	public Piece getPiece(){
 		return piece;
 	}
 
+	/**
+	 * Sets the home location
+	 * @param home
+	 */
 	public void setHome(Point home) {
 		this.home = home;
 		setLoc(home);
 	}
 	
+	/**
+	 * Sets the home location
+	 * @param home
+	 */
 	public void setHome(Point2D home){
 		int x = (int) home.getX();
 		int y = (int) home.getY();
@@ -237,7 +279,9 @@ public class PieceShape implements Shape{
 		return true;
 	}
 	
-	//TODO rewrite this method later
+	/**
+	 * Checks if the Point is contained in the PieceShape
+	 */
 	@Override
 	public boolean contains(Point2D p) {
 		//Checks outside the "body" of the piece on the "pegs"
@@ -253,15 +297,24 @@ public class PieceShape implements Shape{
 		return body.contains(p);
 	}
 
+	/**
+	 * Deprecated
+	 */
 	@Override
 	public boolean contains(Rectangle2D r) {return false;}
 
+	/**
+	 * Deprecated
+	 */
 	@Override
 	public boolean contains(double x, double y) {
 		Point p = new Point((int)x,(int)y);
 		return contains(p);
 	}
 
+	/**
+	 * Deprecated
+	 */
 	@Override
 	public boolean contains(double x, double y, double w, double h) {return false;}
 
@@ -271,20 +324,35 @@ public class PieceShape implements Shape{
 		return body;
 	}
 
+	/**
+	 * Deprecated
+	 */
 	@Override
 	public Rectangle2D getBounds2D() {
 		return getBounds();
 	}
 
+	/**
+	 * Deprecated
+	 */
 	@Override
 	public PathIterator getPathIterator(AffineTransform arg0) {return null;}
 
+	/**
+	 * Deprecated
+	 */
 	@Override
 	public PathIterator getPathIterator(AffineTransform arg0, double arg1) {return null;}
 
+	/**
+	 * Deprecated
+	 */
 	@Override
 	public boolean intersects(Rectangle2D arg0) {return false;}
 
+	/**
+	 * Deprecated
+	 */
 	@Override
 	public boolean intersects(double x, double y, double w, double h) {
 		return intersects(new Rectangle2D.Double(x,y,w,h));
@@ -294,28 +362,48 @@ public class PieceShape implements Shape{
 		return "PieceShape at [" + loc.x + ", " + loc.y + "]\n\t" + piece.toString();
 	}
 
+	/**
+	 * Returns the side specified by the integer
+	 * @param i
+	 * @return
+	 */
 	public PegShape getSide(int i) {
 		return sides[i];
 	}
 	
+	/**
+	 * Sets the location and board if the piece is putinto the board
+	 * @param loc
+	 * @param b
+	 */
 	public void putInBoard(Point loc, Board b){
 		board = b;
 		boardLoc = loc;
 		setInBoard(true);
 	}
 	
+	/**
+	 * Reverses the actions of putInBoard()
+	 */
 	public void removeFromBoard(){
-		System.out.println("removefromboard");//TODO wtf loop twice?
 		if(boardLoc != null)
 			board.setLocation(boardLoc.x, boardLoc.y, null);
 		boardLoc = null;
 		setInBoard(false);
 	}
 	
+	/**
+	 * Returns the body of the pieceShape
+	 * @return
+	 */
 	public Shape getBody(){
 		return body;
 	}
 	
+	/**
+	 * Returns the pegs that face inward of the pieceShape in an array
+	 * @return
+	 */
 	public PegShape[] getInPegs(){
 		PegShape[] in = new PegShape[2];
 		int j = 0;
@@ -328,6 +416,10 @@ public class PieceShape implements Shape{
 		return in;
 	}
 	
+	/**
+	 * Returns the pegs that face outward of the pieceShape in an array
+	 * @return
+	 */
 	public PegShape[] getOutPegs(){
 		PegShape[] out = new PegShape[2];
 		int j = 0;
diff --git a/src/gui/Placeable.java b/src/gui/Placeable.java
deleted file mode 100644
index 13f1527..0000000
--- a/src/gui/Placeable.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package gui;
-
-public interface Placeable {
-
-}
diff --git a/src/gui/PuzzleCanvas.java b/src/gui/PuzzleCanvas.java
index 1f869c3..bbf1b07 100644
--- a/src/gui/PuzzleCanvas.java
+++ b/src/gui/PuzzleCanvas.java
@@ -21,7 +21,13 @@ import framework.*;
 import gui.shapes.PegShape;
 import solver.*;
 
-public class PuzzleCanvas extends JComponent implements MouseListener, MouseWheelListener, MouseMotionListener{
+/**
+ * PuzzleCanvas is the component upon which all the puzzle pieces and
+ * board and tray are drawn. It is the core of the GUI of the puzzle game.
+ * To facilitate the game play, it checks with the framework puzzle class
+ * and synchronizes with the framework board.
+ */
+public class PuzzleCanvas extends JComponent implements MouseListener, MouseMotionListener{
 
 	private PieceShape[] p;
 	private Point[][] boardLocs;
@@ -30,7 +36,13 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 	private double ratio;
 
 	private Point dragOrigin;
-
+	
+	/**
+	 * Constructor that takes a pre-generated array of PieceShapes to draw
+	 * and a framework puzzle to check and sync with for the game to work.
+	 * @param pieces
+	 * @param puzzle
+	 */
 	public PuzzleCanvas(PieceShape[] pieces, Puzzle puzzle){
 		this.p = pieces;
 		this.puzzle = puzzle;
@@ -38,7 +50,11 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 		boardMaker();
 		addMouseListener(this);
 	}
-
+	
+	/**
+	 * trayMaker() simply initializes the homeLoc[] array of Points
+	 * and sets the home locations of all the PieceShapes
+	 */
 	private void trayMaker() {
 		homeLoc = new Point[9];
 		homeLoc[0] = new Point(580, 50);
@@ -53,12 +69,20 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 		setHome();
 	}
 	
+	/**
+	 * Sets the home location of each PieceShape to its corresponding Point
+	 * in the homeLoc array
+	 */
 	private void setHome(){
 		for(int i = 0; i < p.length; i++){
 			p[i].setHome(new Point(homeLoc[i].x+2, homeLoc[i].y+2));
 		}
 	}
-
+	
+	/**
+	 * Initializes the 2D Point array that makes up the board, each is the
+	 * upper left point of the board spot rectangle
+	 */
 	private void boardMaker(){
 		Point[][] p = new Point[3][3];
 		p[0][0] = new Point(100, 50);
@@ -74,6 +98,11 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 		boardLocs = p;
 	}
 
+	/**
+	 * Paints all the parts the the PuzzleCanvas
+	 * It calls paintBoard() to paint the board and paintTray() to paint the
+	 * tray and then overlays the PieceShapes
+	 */
 	public void paint(Graphics g){
 
 		Graphics2D g2 = (Graphics2D)g;
@@ -100,7 +129,11 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 				s.paint(g2);
 		}
 	}
-
+	
+	/**
+	 * Paints the Board without any PieceShapes
+	 * @param g2
+	 */
 	private void paintBoard(Graphics2D g2) {
 		
 		g2.setColor(Color.LIGHT_GRAY.brighter());
@@ -116,6 +149,10 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 		}
 	}
 	
+	/**
+	 * Paints the tray without any PieceShapes
+	 * @param g2
+	 */
 	private void paintTray(Graphics2D g2){
 		for(Point p : homeLoc){
 		g2.setColor(Color.LIGHT_GRAY);
@@ -136,6 +173,11 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 		}
 	}
 
+	/**
+	 * Returns the PieceShape that contains the point it is given
+	 * @param point
+	 * @return
+	 */
 	public PieceShape getClickedPiece(Point point){
 		for(PieceShape e : p){
 			if(e.contains(point)){
@@ -146,6 +188,13 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 	}
 
 	private PieceShape selected;
+	/**
+	 * If the there is no current selected piece then it sets the selected piece
+	 * to the clicked piece. If there is a selected piece then it is either put
+	 * in the clicked board spot or into a tray spot or the selected piece is 
+	 * switched for the piece just clicked
+	 * If it was a right mouse click then the piece is rotated clockwise
+	 */
 	@Override
 	public void mouseClicked(MouseEvent m) {
 		
@@ -190,6 +239,11 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 		repaint();
 	}
 	
+	/**
+	 * Returns the index of the tray spot at Point p
+	 * @param p - the Point
+	 * @return the index of the tray spot in the homeLoc array, -1 if there is none
+	 */
 	private int getClickedTraySpot(Point p) {
 		for(int i = 0; i < homeLoc.length; i++){
 			Rectangle r = new Rectangle(homeLoc[i].x, homeLoc[i].y, 184, 184);
@@ -198,7 +252,12 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 		}
 		return -1;
 	}
-
+	
+	/**
+	 * Sets the location of the selected PieceShape into the point at the tSpot index
+	 * of the homeLoc array
+	 * @param tSpot
+	 */
 	private void putInTray(int tSpot) {
 		Point h = homeLoc[tSpot];
 		Point test = new Point(h.x + 90, h.y + 90);
@@ -279,6 +338,11 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 		return null;
 	}
 	
+	/**
+	 * Called if the reset button on the frame is clicked
+	 * Pieces are returned to the tray and if none of the PieceShapes are in the board
+	 * then the pieces are rotated into the "default" (0) orientation
+	 */
 	public void reset() {
 		if (puzzle.getBoard().isEmpty()) {
 			for (PieceShape e : p){
@@ -317,9 +381,12 @@ public class PuzzleCanvas extends JComponent implements MouseListener, MouseWhee
 	@Override
 	public void mouseMoved(MouseEvent arg0) {}
 
-	@Override
-	public void mouseWheelMoved(MouseWheelEvent m) {}
-
+	/**
+	 * Called if the "Solve" button on the frame is clicked
+	 * It takes the solved puzzle and piece by piece repeats it with the pieces
+	 * in this classes' unsolved puzzle.
+	 * @param solved is the solved puzzle
+	 */
 	public void solve(Puzzle solved) {
 		reset();
 		for(int i = 0; i < p.length; i++){
diff --git a/src/gui/PuzzleGameFrame.java b/src/gui/PuzzleGameFrame.java
index 43e0c3c..9794bce 100644
--- a/src/gui/PuzzleGameFrame.java
+++ b/src/gui/PuzzleGameFrame.java
@@ -22,6 +22,13 @@ import solver.RecursiveSolve;
 
 import framework.*;
 
+/**
+ * Sets up the window for the game to be displayed and holds all the parts of
+ * the GUI representation of the game including the <code>PuzzleCanvas</code>
+ * and the buttons.
+ * @author bunsen
+ *
+ */
 public class PuzzleGameFrame extends JFrame implements ActionListener{
 	
 	private Puzzle puzzle;
@@ -36,6 +43,10 @@ public class PuzzleGameFrame extends JFrame implements ActionListener{
 	
 	public static final Color backColor = Color.LIGHT_GRAY;
 	
+	/**
+	 * Default constructor that sets up the frame, including buttons and
+	 * PieceShapes and adds a PuzzleCanvas to the frame
+	 */
 	public PuzzleGameFrame(){
 		super("Puzzle Game");
 		setTitle("Puzzle Game");
@@ -55,20 +66,25 @@ public class PuzzleGameFrame extends JFrame implements ActionListener{
 		setVisible(true);
 	}
 	
+	/**
+	 * Helper method that sets the size of the frame
+	 */
 	private void setSize(){
 		Dimension max = Toolkit.getDefaultToolkit().getScreenSize();
 		setMinimumSize(new Dimension(960, 750));
 		setSize(getMinimumSize());
 	}
-	
-	public PieceShape[] getP(){
-		return p;
-	}
-	
+
+	/**
+	 * Helper method initializes the framework puzzle
+	 */
 	private void frameworks() {
 		puzzle = new Puzzle();
 	}
 	
+	/**
+	 * Helper method that sets up the buttons and the action listeners
+	 */
 	private void buttonMaker(){
 		solve = new JButton("Solve");
 		reset = new JButton("Reset");
@@ -83,6 +99,9 @@ public class PuzzleGameFrame extends JFrame implements ActionListener{
 		help.addActionListener(this);
 	}
 
+	/**
+	 * Helper method that adds the buttons to a panel and adds that to the frame
+	 */
 	private void controlMaker() {
 		controlPanel = new JPanel();
 		controlPanel.add(solve, BorderLayout.EAST);
@@ -91,6 +110,9 @@ public class PuzzleGameFrame extends JFrame implements ActionListener{
 		add(controlPanel, BorderLayout.SOUTH);
 	}
 
+	/**
+	 * Helper method sets up the menu bar for the frame
+	 */
 	private void menuMaker() {
 		mBar = new JMenuBar();
 		setJMenuBar(mBar);
@@ -113,6 +135,9 @@ public class PuzzleGameFrame extends JFrame implements ActionListener{
 		}
 	}
 	
+	/**
+	 * The action listener for the buttons
+	 */
 	public void actionPerformed(ActionEvent event) {
 		if(event.getActionCommand().equals("solve")){
 			Puzzle temp = new Puzzle();
@@ -140,6 +165,10 @@ public class PuzzleGameFrame extends JFrame implements ActionListener{
 		}
 	}
 	
+	/**
+	 * main method that starts the game by initializing the frame
+	 * @param a
+	 */
 	public static void main(String[] a){
 		PuzzleGameFrame f = new PuzzleGameFrame();
 	}
-- 
1.7.9.4

